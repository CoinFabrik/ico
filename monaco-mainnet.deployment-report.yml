
chain: mainnet

verify_on_etherscan: yes 

    # Firefox 53b has an issue that prevents correct Selenium automated
    # interaction with Etherscan form.
    # http://stackoverflow.com/q/43175013/315168
browser_driver: chrome

    #
    # Contracts section defines different smart contracts that
    # are required to run the ICO.
    #
contracts:

        # Not an actual deployment, but only on mainnet
  team_multisig:
    contract_name: MultiSigWallet
    contract_file: GnosisWallet.sol
    address: '0xE8BaF9DF0DeD92c5f28AaB97f13936E7716A4a5B'

        #
        # Token contract
        #
        # This contract represents ERC-20 token.
        # It has transfer lock up functionality to prevent the token to be transferable
        # until the ICO is over. Furthermore it has dynamic minting supply,
        # so that the crowdsale contract will create new tokens as investment arrives in.
        # This way, there is no need for a separate burn stage at the end of the crowdsale,
        # as we never create the exceeding supply.
        #
        #
  token: !!omap
  - contract_name: CrowdsaleToken
  - contract_file: CrowdsaleToken.sol
  - arguments: !!omap
    - _name: Monaco
    - _symbol: MCO
    - _initialSupply: 0
    - _decimals: 8
  - address: '0x00eb84e7ca4ad6dbbef240056bc904003029a4cd'
  - constructor_args: '0x000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064d6f6e61636f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d434f0000000000000000000000000000000000000000000000000000000000'
  - libraries:
      SafeMathLib: '0x00909665cb7780374c2e6f0af3cea2cae6615e7c'
  - etherscan_link: https://etherscan.io/address/0x00eb84e7ca4ad6dbbef240056bc904003029a4cd
        #
        # Pricing strategy
        #
  pricing_strategy: !!omap
  - contract_name: EthTranchePricing
  - contract_file: EthTranchePricing.sol
  - arguments: !!omap
    - _tranches:
      - 0
      - 6666660000000000
      - 10001000000000000000000
      - 7142850000000000
      - 30001000000000000000000
      - 7692300000000000
      - 50001000000000000000000
      - 8333330000000000
      - 75001000000000000000000
      - 9090900000000000
      - 100001000000000000000000
      - 10000000000000000
      - 1000000000000000000000000000
      - 10000000000000000
      - 1000000000000000000000000000000
      - 0
  - address: '0xd27bf944e944a91836ab6ac8f736339c4eb3baf6'
  - constructor_args: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017af4abd23680000000000000000000000000000000000000000000000021e27c1806e59a40000000000000000000000000000000000000000000000000000001960625cef140000000000000000000000000000000000000000000000065a5b8313e3be240000000000000000000000000000000000000000000000000000001b541b29017800000000000000000000000000000000000000000000000a968f44a75922a40000000000000000000000000000000000000000000000000000001d9b1e96723400000000000000000000000000000000000000000000000fe1cff69fabe044000000000000000000000000000000000000000000000000000000204c201930480000000000000000000000000000000000000000000000152d10a897fe9de40000000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000c9f2c9cd04674edea400000000000000000000000000000000000000000000000000000000000000000000000'
  - libraries:
      SafeMathLib: '0x00909665cb7780374c2e6f0af3cea2cae6615e7c'
  - etherscan_link: https://etherscan.io/address/0xd27bf944e944a91836ab6ac8f736339c4eb3baf6
  crowdsale: !!omap
  - contract_name: MintedEthCappedCrowdsale
  - contract_file: MintedEthCappedCrowdsale.sol
  - arguments: !!omap
    - _token: '0x00eb84e7ca4ad6dbbef240056bc904003029a4cd'
    - _pricingStrategy: '0xd27bf944e944a91836ab6ac8f736339c4eb3baf6'
    - _multisigWallet: '0xE8BaF9DF0DeD92c5f28AaB97f13936E7716A4a5B'
    - _start: 1495013400
    - _end: 1497691800
    - _minimumFundingGoal: 5000000000000000000000
    - _weiCap: 888888000000000000000000
  - address: '0x8069a35f91e92aead8e96c36a1117601f726b3d3'
  - constructor_args: '0x00000000000000000000000000eb84e7ca4ad6dbbef240056bc904003029a4cd000000000000000000000000d27bf944e944a91836ab6ac8f736339c4eb3baf6000000000000000000000000e8baf9df0ded92c5f28aab97f13936e7716a4a5b00000000000000000000000000000000000000000000000000000000591c1818000000000000000000000000000000000000000000000000000000005944f69800000000000000000000000000000000000000000000010f0cf064dd5920000000000000000000000000000000000000000000000000bc3ab70c8588dde00000'
  - libraries:
      SafeMathLib: '0x00909665cb7780374c2e6f0af3cea2cae6615e7c'
  - etherscan_link: https://etherscan.io/address/0x8069a35f91e92aead8e96c36a1117601f726b3d3
        #
        # At the end of the crowdsale
        # sold tokens: 30%
        # team tokens: 70%
        #
  finalize_agent: !!omap
  - contract_name: BonusFinalizeAgent
  - contract_file: BonusFinalizeAgent.sol
  - arguments: !!omap
    - _token: '0x00eb84e7ca4ad6dbbef240056bc904003029a4cd'
    - _crowdsale: '0x8069a35f91e92aead8e96c36a1117601f726b3d3'
    - _bonusBasePoints: 23333
    - _teamMultisig: '0xE8BaF9DF0DeD92c5f28AaB97f13936E7716A4a5B'
  - address: '0xb91abbbfac88ed048961a13e6b8345e941120658'
  - constructor_args: '0x00000000000000000000000000eb84e7ca4ad6dbbef240056bc904003029a4cd0000000000000000000000008069a35f91e92aead8e96c36a1117601f726b3d30000000000000000000000000000000000000000000000000000000000005b25000000000000000000000000e8baf9df0ded92c5f28aab97f13936e7716a4a5b'
  - libraries:
      SafeMathLib: '0x00909665cb7780374c2e6f0af3cea2cae6615e7c'
  - etherscan_link: https://etherscan.io/address/0xb91abbbfac88ed048961a13e6b8345e941120658

    # Post-deployment actions connect contracts together.
post_actions: |2

  # Enable new token minting by a crowdsale contract
  confirm_tx(token.transact({"from": deploy_address}).setMintAgent(crowdsale.address, True))

  # Track participants
  confirm_tx(crowdsale.transact({"from": deploy_address}).setRequireCustomerId(True))

  # Enable token mintint at the end of the crowdsale to create bonus pool, founder pool and such
  confirm_tx(token.transact({"from": deploy_address}).setMintAgent(finalize_agent.address, True))
  confirm_tx(crowdsale.transact({"from": deploy_address}).setFinalizeAgent(finalize_agent.address))
  confirm_tx(token.transact({"from": deploy_address}).setReleaseAgent(finalize_agent.address))

  # Move ownership of all owned contracts to the team multisig address
  # confirm_tx(crowdsale.transact({"from": deploy_address}).transferOwnership(team_multisig.address))
  confirm_tx(token.transact({"from": deploy_address}).transferOwnership(team_multisig.address))

  # Set token upgrade master to team multisig to give the new token path
  confirm_tx(token.transact({"from": deploy_address}).setUpgradeMaster(team_multisig.address))

  # Allow test buys from these accounts
  confirm_tx(crowdsale.transact({"from": deploy_address}).setEarlyParicipantWhitelist(deploy_address, True))
  confirm_tx(crowdsale.transact({"from": deploy_address}).setEarlyParicipantWhitelist("0x1c5e4db864861D9b6203bd86Af0C0B5ffcD6115d", True))

# Sanity check
verify_actions: |
  assert token.call().owner().lower() == team_multisig.address.lower()
  assert crowdsale.call().owner().lower() == deploy_address.lower()
  assert crowdsale.call().multisigWallet().lower() == team_multisig.address.lower()
  assert finalize_agent.call().teamMultisig().lower() == team_multisig.address.lower()
  assert finalize_agent.call().isSane()
  assert crowdsale.call().getState() == CrowdsaleState.PreFunding

deploy_address: '0x51b9311eb6ec8beb049dafeafe389ee2818b1b20'
